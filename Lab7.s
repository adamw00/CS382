.text
.global _start

_start:
	ADR X22, P	//TAKES IN DATA FOR X22
	MOV X0, #5	//LENGTH OF ARRAY IN X0
	BL find	//CALLS FIND FUNC
	BL end		//CALLS END
	
find:
	SUB SP, SP, #16	//SHIFT SP BY 2
	STUR X30, [SP, #8]	//STORE X30 IN SP
	STUR X0, [SP, #0]	//STORE X0 IN SP
	SUBS X10, X0, #1	//CHECK IF STILL NUMBERS IN ARRAY TO COMPARE
	BGT L1			//GOTO L1 IF MORE NUMBERS IN ARRAY TO COMPARE
	LDUR X1, [X22, #0]	//X1 = ARRAY[0]
	ADD SP, SP, #16	//REMOVE SP
	BR X30			//RETURN
	
L1:
	SUB X0, X0, #1		//X0--
	BL find		//CALL FIND FUNC
	LDUR X0, [SP, #0]	//LOAD SP VALUE IN X0
	LDUR X30, [SP, #8]	//LOAD SP VALUE IN X30
	ADD SP, SP, #16	//REMOVES SP
	ADD X22, X22, #8	//INCREMENT ITERATOR I
	LDR X2, [X22]		//X2 = ARRAY[I+1]
	SUBS X10, X2, X1	//COMPARE ADJACENT VALUES
	BGT L2			//IF X2>X1 L2
	BR X30			//RETURN
	
L2:
	MOV X1, X2		//SET X1=X2
	BR X30			//RETURN
	
end: 
	LDR X0, =print_num	//PRINTING AND STUFFS
	BL printf
	MOV X0, #0
	MOV w8, #93
	SVC #0
	
.data
print_num:
	.ascii "MAX VALUE: %d\n\0"	
	
P:
	.quad 92,64,212,99,4
	
